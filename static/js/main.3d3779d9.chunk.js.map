{"version":3,"sources":["components/Main.js","components/List.js","components/Readme.js","components/Header.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Main","history","useHistory","useState","name","setName","useEffect","listener","event","code","push","document","addEventListener","removeEventListener","className","id","type","value","onChange","target","htmlFor","onClick","List","repoList","userName","useParams","map","repo","key","to","Readme","readme","source","Header","repositoryName","Home","setRepoList","url","axios","then","it","data","item","setReadme","readmeUrl","download_url","text","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qNA0CeA,EAvCF,WAEX,IAAMC,EAAUC,cAFC,EAIOC,mBAAS,IAJhB,mBAIVC,EAJU,KAIJC,EAJI,KAyBjB,OAZAC,qBAAU,WACR,IAAMC,EAAW,SAACC,GACG,UAAfA,EAAMC,MAAmC,gBAAfD,EAAMC,MAClCR,EAAQS,KAAKN,IAIjB,OADAO,SAASC,iBAAiB,UAAWL,GAC9B,WACLI,SAASE,oBAAoB,UAAWN,OAK1C,6BACE,yBAAKO,UAAU,cACb,yBAAKA,UAAU,sBACb,2BAAOC,GAAG,WAAWC,KAAK,OAAOC,MAAOb,EAAMc,SAxBrC,SAACV,GAChBH,EAAQG,EAAMW,OAAOF,UAwBf,2BAAOG,QAAQ,YAAf,YACA,4BAAQL,GAAG,aAAaC,KAAK,SAASF,UAAU,+BAA+BO,QAtBvE,WACdpB,EAAQS,KAAKN,KAqBP,cCdKkB,EAjBF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACNC,EAAaC,cAAbD,SAIR,OACE,6BACE,yBAAKV,UAAU,qBACZS,EAASG,KAAI,SAACC,GAAD,OAAW,yBAAKC,IAAKD,EAAMb,UAAU,mBAC/C,kBAAC,IAAD,CAAMe,GAAE,WAAML,EAAN,YAAkBG,IAAUA,U,iBCAjCG,EARA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,6BACE,kBAAC,IAAD,CAAeC,OAAQD,MCUdE,EAdA,WAAO,IAAD,EACkBR,cAA7BD,EADW,EACXA,SAAUU,EADC,EACDA,eAElB,OACE,yBAAKpB,UAAU,kBACb,yBAAKC,GAAG,kBAAkBD,UAAU,6BAA6BoB,GAAkBV,GAAY,WAC5FA,GAAa,kBAAC,IAAD,CAAMV,UAAU,6BAA6Be,GAAG,IAAId,GAAG,WAAvD,WACbmB,GAAmB,kBAAC,IAAD,CAAML,GAAE,WAAML,GAAYV,UAAU,6BAA6BC,GAAG,sBAApE,aC2CboB,EA5CF,WAAO,IAAD,EACoBV,cAA7BD,EADS,EACTA,SAAUU,EADD,EACCA,eADD,EAEe/B,mBAAS,IAFxB,mBAEVoB,EAFU,KAEAa,EAFA,KAGXC,EAAG,uCAAmCb,EAAnC,UAETlB,qBAAU,WACgB,qBAAbkB,GACTc,IAAMD,GAAKE,MAAK,SAACC,GACfJ,EAAYI,EAAGC,KAAKf,KAAI,SAACgB,GAAD,OAAUA,EAAKtC,cAG1C,CAACiC,EAAKb,IAXQ,MAaWrB,mBAAS,IAbpB,mBAaV4B,EAbU,KAaFY,EAbE,KAcXC,EAAS,uCAAmCpB,EAAnC,YAA+CU,EAA/C,WAiBf,OAfA5B,qBAAU,WAEc,qBAAbkB,GACmB,qBAAnBU,GAEPI,IAAMM,GAAWL,MAAK,YAAe,IAAZE,EAAW,EAAXA,KACvBH,IAAMG,EAAKI,cAAcN,MAAK,YAAqB,IAAZO,EAAW,EAAjBL,KAC/BE,EAAUG,WAIf,CAACZ,EAAgBV,EAAUoB,IAK5B,6BACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,aAAaC,UAAW,kBAAM,kBAAC,EAAD,CAAM1B,SAAUA,OAChE,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,6BAA6BC,UAAW,kBAAM,kBAAC,EAAD,CAAQlB,OAAQA,UCxB3EmB,MAff,WAEE,OACE,yBAAKpC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,aAAaC,UAAW,kBAAM,kBAAC,EAAD,SAChD,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,6BAA6BC,UAAW,kBAAM,kBAAC,EAAD,aCHtDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASgD,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3d3779d9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Main = () => {\r\n\r\n  const history = useHistory()\r\n\r\n  const [name, setName] = useState('')\r\n  const onChange = (event) => {\r\n    setName(event.target.value)\r\n  }\r\n\r\n  const onClick = () => {\r\n    history.push(name)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\r\n        history.push(name)\r\n      }\r\n    };\r\n    document.addEventListener(\"keydown\", listener);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", listener);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row center\">\r\n        <div className=\"input-field col s6\">\r\n          <input id=\"username\" type=\"text\" value={name} onChange={onChange} />\r\n          <label htmlFor=\"username\">Username</label>\r\n          <button id=\"search-btn\" type=\"button\" className=\"waves-effect waves-light btn\" onClick={onClick}>Search</button>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main","import React from 'react'\r\nimport { useParams, Link } from 'react-router-dom'\r\n\r\nconst List = ({ repoList }) => {\r\n  const { userName } = useParams();\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"collection center\">\r\n        {repoList.map((repo) => (<div key={repo} className=\"collection-item\">\r\n            <Link to={`/${userName}/${repo}`} >{repo}</Link>\r\n          </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List","import React from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\n\r\nconst Readme = ({ readme }) => {\r\n  return (\r\n    <div>\r\n      <ReactMarkdown source={readme} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Readme","import React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  const { userName, repositoryName } = useParams();\r\n\r\n  return (\r\n    <nav className=\"teal lighten-2\">\r\n      <div id=\"repository-name\" className=\"left hide-on-med-and-down\">{repositoryName || userName || \"Welcome\"}</div>\r\n        {userName && (<Link className=\"right hide-on-med-and-down\" to=\"/\" id=\"go-back\">Go Home</Link>)}\r\n        {repositoryName && (<Link to={`/${userName}`} className=\"right hide-on-med-and-down\" id=\"go-repository-list\">Go Back</Link>)}\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {};\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Route, Switch, useParams } from 'react-router-dom'\r\n\r\nimport Main from './Main'\r\nimport List from \"./List\"\r\nimport Readme from \"./Readme\"\r\nimport Header from './Header'\r\n\r\nconst Home = () => {\r\n  const { userName, repositoryName } = useParams()\r\n  const [repoList, setRepoList] = useState([])\r\n  const url = `https://api.github.com/users/${userName}/repos`\r\n\r\n  useEffect(() => {\r\n    if (typeof userName !== 'undefined') {\r\n      axios(url).then((it) => {\r\n        setRepoList(it.data.map((item) => item.name));\r\n      })\r\n    }\r\n  }, [url, userName])\r\n\r\n  const [readme, setReadme] = useState('')\r\n  const readmeUrl = `https://api.github.com/repos/${userName}/${repositoryName}/readme`\r\n\r\n  useEffect(() => {\r\n    if (\r\n      typeof userName !== \"undefined\" &&\r\n      typeof repositoryName !== \"undefined\"\r\n    ) {\r\n      axios(readmeUrl).then(({ data }) => {\r\n        axios(data.download_url).then(({ data: text }) => {\r\n          setReadme(text);\r\n        });\r\n      });\r\n    }\r\n  }, [repositoryName, userName, readmeUrl])\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={() => <Main />} />\r\n          <Route exact path=\"/:userName\" component={() => <List repoList={repoList} />} />\r\n          <Route exact path=\"/:userName/:repositoryName\" component={() => <Readme readme={readme} />} />\r\n        </Switch>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport 'materialize-css'\n\nimport Home from './components/Home'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={() => <Home />} />\n          <Route exact path=\"/:userName\" component={() => <Home />} />\n          <Route exact path=\"/:userName/:repositoryName\" component={() => <Home />} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}